#!/usr/bin/env bash

# Prowler - the handy cloud security tool (copyright 2019) by Toni de la Fuente
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
CHECK_ID_extra779="7.79"
CHECK_TITLE_extra779="[extra779] Ensure no security groups allow ingress from 0.0.0.0/0 or ::/0 to Elasticsearch/Kibana ports 9200/9300/5601"
CHECK_SCORED_extra779="NOT_SCORED"
CHECK_TYPE_extra779="EXTRA"
CHECK_ALTERNATE_check779="extra779"

extra779(){
  # if TEST_AUTHENTICATION has a value Prowler will try to access each ElasticSearch server to port:
  # 9200 API, 9300 Communcation and 5601 Kibana to figure out if authentication is enabled.
  # That is from the host where Prowler is running and will try to read indices or get kibana status
  TEST_ES_AUTHENTICATION=
  httpStatus(){
    case $1 in 
      000) SERVER_RESPONSE="000 Not responding" ;;
      200) SERVER_RESPONSE="200 Successful" ;;
      400) SERVER_RESPONSE="400 Error: Bad Request" ;;
      401) SERVER_RESPONSE="401 Error: Unauthorized" ;;
      403) SERVER_RESPONSE="403 Error: Forbidden" ;;
      404) SERVER_RESPONSE="404 Error: Not Found" ;;
      407) SERVER_RESPONSE="407 Error: Proxy Authentication Required" ;;
      408) SERVER_RESPONSE="408 Error: Request Timeout" ;;
      500) SERVER_RESPONSE="500 Error: Internal Server Error" ;;
      502) SERVER_RESPONSE="502 Error: Bad Gateway" ;;
      503) SERVER_RESPONSE="503 Error: Service Unavailable" ;;
      504) SERVER_RESPONSE="504 Error: Gateway Timeout" ;;
      505) SERVER_RESPONSE="505 Error: HTTP Version Not Supported" ;;
      *)   SERVER_RESPONSE="HTTP: status not defined." ;;
    esac
  }

  for regx in $REGIONS; do
    # crate a list of SG open to the world with port 9200 or 9300 or 5601
    SG_LIST=$($AWSCLI ec2 describe-security-groups $PROFILE_OPT --region $regx --output text \
      --query 'SecurityGroups[?length(IpPermissions[?((FromPort==null && ToPort==null) || (FromPort<=`9200` && ToPort>=`9200`) || (FromPort<=`9300` && ToPort>=`9300`) || (FromPort<=`5601` && ToPort>=`5601 `)) && (contains(IpRanges[].CidrIp, `0.0.0.0/0`) || contains(Ipv6Ranges[].CidrIpv6, `::/0`))]) > `0`].{GroupId:GroupId}')
    # in case of open security groups goes through each one
    if [[ $SG_LIST ]];then
      for sg in $SG_LIST;do
        # temp file store the list of instances IDs and public IP address if found
        TEMP_EXTRA779_FILE=$(mktemp -t prowler-${ACCOUNT_NUM}-es-domain.EXTRA779.XXXXXXXXXX)
        # finds instances with that open security group attached and get its public ip address (if it has one)
        $AWSCLI $PROFILE_OPT --region $regx ec2 describe-instances --filters Name=instance.group-id,Values=$sg --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress]' --output text > $TEMP_EXTRA779_FILE
        # in case of exposed instances it does access checks
        if [[ -s "$TEMP_EXTRA779_FILE" ]];then
          while read instance eip ; do 
            if [[ $TEST_ES_AUTHENTICATION ]];then
              if [[ "$eip" != "None" ]];then 
                # check for Elasticsearch on port 9200, rest API HTTP.
                CHECH_HTTP_9200=$(curl -m 2 -s -w "%{http_code}" -o /dev/null -X GET "http://$eip:9200/_cat/indices")
                httpStatus $CHECH_HTTP_9200
                if [[ $CHECH_HTTP_9200 -eq "200" ]];then 
                  textFail "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Elasticsearch port 9200 response $SERVER_RESPONSE" "$regx"
                else
                  textInfo "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Elasticsearch port 9200 response $SERVER_RESPONSE" "$regx"
                fi 

                # check for port 9300 TCP, this is the communication port, not:
                # test_tcp_connectivity is in include/os_detector 
                # syntax is 'test_tcp_connectivity $HOST $PORT $TIMEOUT' (in seconds)
                CHECK_TCP_9300=$(test_tcp_connectivity $eip 9300 2)
                # Using HTTP error codes here as well to reuse httpStatus function  
                # codes for better handling, so 200 is open and 000 is not responding
                httpStatus $CHECK_TCP_9300
                if [[ $CHECK_TCP_9300 -eq "200" ]];then
                  textFail "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Elasticsearch port 9300 response $SERVER_RESPONSE" "$regx"
                else
                  textInfo "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Elasticsearch port 9300 response $SERVER_RESPONSE" "$regx"
                fi 

                # check for Kibana on port 5601
                CHECH_HTTP_5601=$(curl -m 2 -s -w "%{http_code}" -o /dev/null -X GET "http://$eip:5601/api/status")
                httpStatus $CHECH_HTTP_5601
                if [[ $CHECH_AUTH_5601 -eq "200" ]];then
                  textFail "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Kibana response $SERVER_RESPONSE" "$regx"
                else
                  textInfo "$regx: Found instance $instance with public IP $eip on Security Group: $sg with Kibana response $SERVER_RESPONSE" "$regx"
                fi  
              fi 
            else
              if [[ "$eip" == "None" ]];then 
                textInfo "$regx: Found instance $instance with private IP on Security Group: $sg" "$regx"
              else 
                textFail "$regx: Found instance $instance with public IP $eip on Security Group: $sg open to 0.0.0.0/0 on for Elasticsearch/Kibana ports" "$regx"
              fi 
            fi 
            if [[ "$eip" == "None" ]];then 
              textInfo "$regx: Found instance $instance with private IP on Security Group: $sg" "$regx"
            fi
          # done < <(cat $TEMP_EXTRA779_FILE | grep -v None$)
          done < <(cat $TEMP_EXTRA779_FILE)
          # while read instance eip ; do 
          #   textInfo "$regx: Found instance $instance with private IP on Security Group: $sg" "$regx"
          # done < <(cat $TEMP_EXTRA779_FILE | grep None$)
        fi 
        rm -rf $TEMP_EXTRA779_FILE 
        #textFail "$regx: Found Security Group: $sg open to 0.0.0.0/0 on for Elasticsearch ports" "$regx"
      done
    else
      textPass "$regx: No Security Groups found open to 0.0.0.0/0 for Elasticsearch/Kibana ports" "$regx"
    fi
  done
}
